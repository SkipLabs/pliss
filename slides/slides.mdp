%title: Reactive programming in SKIP
%author: Julien verlaguet (SkipLabs)
%date: 2022-10-25

-> # Welcome to PLISS 2022! <-

--------------------------------------------------
-> # About me! <-

* The Hack guy
* But also the SKIP guy! :)
* CEO SkipLabs

--------------------------------------------------
-> # What is SKIP? <-
==============

* A programming language for reactive programming
* Statically typed
* Generates native code (and wasm)

--------------------------------------------------
-> # What is reactive programming? <-
==============

* Recompute only what changed
* Can "watch" changes
* Can be applied to anything

--------------------------------------------------
-> # DEMO: skdb <-
==============

--------------------------------------------------
-> # DEMO: skgui <-
==============

--------------------------------------------------
-> # DEMO: skml <-
==============

-------------------------------------------------
-> # Reactive programming? Streaming?  <-

* Given a stream of updates, produce a view.
* Forces you to think "backwards"
* For example: a compiler.

-------------------------------------------------
-> # Reactive programming? Memoization?  <-

* Save results that you already computed
* You have to control effects
* Problem: it's impossible to build an index

-------------------------------------------------
-> # Reactive programming? SKFS!  <-

* A reactive file system
* Well known abstractions
* Can accomodate eager/lazy

-------------------------------------------------
-> # SKFS  <-

* Let's try it!
* git clone https://github.com/SkipLabs/pliss.git

-------------------------------------------------
-> # SKFS  <-

* cd pliss
* make
* Sorry for the mess \_O_/

-------------------------------------------------
-> # A first example  <-

* Adding numbers reactively
* Not super interesting ...
* ... but you have to start somewhere.

-------------------------------------------------
-> # Code  <-

-------------------------------------------------
-> # Why a new language?  <-

* We need strong static guarantees
* Existing languages don't have them
* Can we add them to an existing language?

-------------------------------------------------
-> # Add immutability guarantees to a language <-

* You could but that defies the purpose
* Incompatible with the rest of the language

-------------------------------------------------
-> # A new language? Good news! <-

* We can have a new memory model
* We can have safe parallelism
* And of course, we can have reactivity

-------------------------------------------------
-> # What is SKIP? <-

* Skip is immutable by default
* Skip makes mutability explicit
* Powerful type-system with implicit sub-typing.

-------------------------------------------------
-> # Why? <-

* Objects get in/out of caches without a copy
* Predictable GC pause time
* Safe parallelism

-------------------------------------------------
-> # Skip TS challenges <-

* Mutability should not be able to hide
* We have a problem with closures
* We have a problem with generics

-------------------------------------------------
-> # Explicit mutability means ... <-

* For any given type ...
* If it does not contain the keyword mutable ...
* ... It's immutable!

-------------------------------------------------
-> # Closures <-

* Problem: closures can hide mutable objects
* Solution, two kind of closures: ~> and ->
* One is subtype of the other

-------------------------------------------------
-> # Generics <-

* Let's say I have B<T> (T is generic)
* And call a function expecting A (no generic)
* The T was able to hide!

-------------------------------------------------
-> # Generics <-

* Should B<T> be subtype of A
* Yes, if T is immutable
* No otherwise

-------------------------------------------------
-> # Mutability preservation <-

* Subtyping introduces constraint on existentials
* To enforce immutable generics, T: frozen

-------------------------------------------------
-> # Let's talk about memory! <-

-------------------------------------------------
-> # Well known memory models <-

* Malloc/free
* Reference counter
* Tracing GC

-------------------------------------------------
-> # Tracing GC <-

* Forced to scan the whole heap
* Solution? Generations
* Problem: escape analysis is not precise.

-------------------------------------------------
-> # Tracing GC <-

* Tracing GC are great for programers
* But ... the GC time is unpredictable
* Not in SKIP!

-------------------------------------------------
-> # SKIP memory model: what are regions? <-

* Regions are a stack of heaps
* The last region is POPed on exit
* Requires an liveness analysis

-------------------------------------------------
-> # SKIP memory model <-

* What if we could GC regions
* We first copy things out and then POP
* We can GC at the function level!


-------------------------------------------------
-> # SKIP memory model <-

* What about the top region?
* The top regions are reference counted
* These are the objects living in SKFS

-------------------------------------------------
-> # SKIP memory model <-

* The heap is immutable
* Updates produce a new heap
* Gives us MVCC for free :)

-------------------------------------------------
-> # SKIP parallelism <-

* Immutability makes split/join safe
* Gives us parallelism for free

-------------------------------------------------
-> # SKIP reactivity <-

* Immutability guarantees that caches are safe
* The runtime tracks dependencies

-------------------------------------------------
-> # Skip type inference <-

* Instead of accumulating contraints
* Turn the sub-typing into an algebra
* Why? Better error messages.

-------------------------------------------------
-> # The problem with implicit subtyping <-

* 'a <= 'b && 'b <- Int
* I can deduce by transitivity that 'a is an Int
* The problems is to tie that back to the AST

-------------------------------------------------
-> # Solution: don't write constraints <-

* Instead of writing 'a <= 'b
* write: + {..., 'a} JOIN - {..., 'b}
* It's easy to tie to the ast.


-------------------------------------------------
-> # Thank you!  <-

