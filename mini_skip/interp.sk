module SKML;

base class Value {
  children =
  | VError(String)
  | VBool(Bool)
  | VInt(Int)
  | VTuple(Array<Value>)
  | VArray(Array<Value>)
  | VObject(Name, Array<(Name, Value)>)
  | VFun((mutable SKFS.Context, Array<Value>) ~> Value)
}

class Evaluator{
  prims: SortedMap<String, (Type, Array<Value> ~> Value)>,
  tdefs: SKFS.LHandle<TypeFile>,
} {
  fun eval(
    context: mutable SKFS.Context,
    funName: String,
    values: Array<Value>,
  ): Value {
    tdef = this.tdefs.getArray(context, SKFS.SID(funName));
    if (tdef.size() == 0) return VError("Unbound function: " + funName);
    env = SortedMap[];
    fun_ = tdef[0].value match {
    | (_, f @ TFun _) -> f
    | _ -> return VError(funName + " is not a function")
    };
    this.evalCall(context, env, fun_, values)
  }

  fun evalCall(
    context: mutable SKFS.Context,
    env: SortedMap<Int, Value>,
    fun_: TFun,
    values: Array<Value>,
  ): Value {
    params = fun_.params;
    for (i in Range(0, values.size())) {
      if (i > params.size()) break void;
      param = params[i];
      !env[param.id] = values[i]
    };
    this.evalEqs(context, env, fun_.eqs, fun_.ret)
  }

  fun evalEqs(
    context: mutable SKFS.Context,
    env: SortedMap<Int, Value>,
    eqs: Array<TEq>,
    ret: TExpr,
  ): Value {
    for (eq in eqs) {
      rhsValue = this.evalExpr(context, env, eq.rhs);
      !env = this.bindPat(env, eq.lhs, rhsValue)
    };
    this.evalExpr(context, env, ret)
  }

  fun evalExpr(
    context: mutable SKFS.Context,
    env: SortedMap<Int, Value>,
    e: TExpr,
  ): Value {
    e.e match {
    | TEBool(b) -> VBool(b)
    | TEInt(n) -> VInt(n)
    | TEVar(n, _) -> env[n]
    | TEGlobal(n) ->
      arr = this.tdefs.getArray(context, SKFS.SID(n.value));
      if (arr.size() == 0) {
        if (this.prims.containsKey(n.value)) {
          return VFun((_context, x) ~> this.prims[n.value].i1(x));
        };
        return VError("Unbound name: " + n.value);
      };
      arr[0].value match {
      | (_, f @ TFun _) ->
        VFun((context, args) ~> this.evalCall(context, env, f, args))
      | _ -> VError(n.value + " is not a function")
      }
    | TETuple(arr) -> VTuple(arr.map(x -> this.evalExpr(context, env, x)))
    | TEObject(n, fields) ->
      if (!(e.ty.ty is TNamed _)) {
        debug(e);
        return VError("Invalid object");
      };
      VObject(n, fields.map(x -> (x.i0, this.evalExpr(context, env, x.i1))))
    | TEArray(arr) -> VArray(arr.map(x -> this.evalExpr(context, env, x)))
    | TECall(fe, argse) ->
      this.evalExpr(context, env, fe) match {
      | err @ VError _ -> err
      | VFun(f) ->
        args = argse.map(x -> this.evalExpr(context, env, x));
        f(context, args)
      | _ -> VError("Call expects a function")
      }
    | TEIf(cond, eqs1, v1, eqs2, v2) ->
      this.evalExpr(context, env, cond) match {
      | err @ VError _ -> err
      | VBool(true) -> this.evalEqs(context, env, eqs1, v1)
      | VBool(false) -> this.evalEqs(context, env, eqs2, v2)
      | _ -> VError("If expects a boolean condition")
      }
    | TEDot(obje, idx, _) ->
      if (idx < 0) return VError("Invalid field");
      this.evalExpr(context, env, obje) match {
      | err @ VError _ -> err
      | VObject(_, fields) -> fields[idx].i1
      | _ -> VError("Field access on something that isn't an object")
      }
    | TEGetArray(obje, idxe) ->
      this.evalExpr(context, env, obje) match {
      | err @ VError _ -> err
      | VArray(arr) ->
        this.evalExpr(context, env, idxe) match {
        | VInt(n) ->
          if (n < 0 || n > arr.size()) VError("Out of bounds") else arr[n]
        | _ -> VError("Expected an integer")
        }
      | _ -> VError("Field access on something that isn't an object")
      }
    }
  }

  fun bindPat(
    env: SortedMap<Int, Value>,
    pat: TPat,
    v: Value,
  ): SortedMap<Int, Value> {
    (pat, v) match {
    | (PVar(n, _), _) ->
      !env[n] = v;
      env
    | (PTuple(arr), VTuple(values)) ->
      for (i => spat in arr) {
        if (i >= values.size()) break void;
        !env = this.bindPat(env, spat, values[i]);
      };
      env
    | _ -> env
    }
  }
}
