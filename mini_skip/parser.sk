module SKML;

class Parser(
  pos: Int,
  lexer: Lexer,
  posMap: SortedMap<PosId, Pos> = SortedMap[],
  topSym: Int = 0,
  currentSymbol: ?String = None(),
) {
  fun isEOF(): Bool {
    (_, tok) = this.lexer.next(this.pos);
    tok.begin >= tok.end
  }

  fun isEq(str: String): Bool {
    (_, tok) = this.lexer.next(this.pos);
    this.lexer.isEq(tok.begin, str)
  }

  fun next(): (this, Token) {
    (!this.pos, tok) = this.lexer.next(this.pos);
    (this, tok)
  }

  fun expect(str: String): this {
    (_, tok) = this.lexer.next(this.pos);
    if (!this.lexer.isEq(tok.begin, str)) {
      throw Expected(this.lexer.fileName, this.pos, str);
    };
    !this.pos = tok.begin + str.length();
    this
  }

  fun parseName(): (this, Name) {
    (!this.pos, tok) = this.lexer.next(this.pos);
    if (tok.begin >= tok.end) throw InvalidName(this.lexer.fileName, tok.begin);
    str = String::fromChars(this.lexer.content.slice(tok.begin, tok.end));
    pos = Pos(this.lexer.fileName, tok.begin, tok.end);
    (!this, posId) = this.addPos(pos);
    name = Name(posId, str);
    (this, name)
  }

  fun parseSymbol(): (this, Name) {
    (!this.pos, tok) = this.lexer.next(this.pos);
    if (tok.begin >= tok.end) throw InvalidName(this.lexer.fileName, tok.begin);
    str = String::fromChars(this.lexer.content.slice(tok.begin, tok.end));
    !this.currentSymbol = Some(str);
    pos = Pos(this.lexer.fileName, tok.begin, tok.end);
    (!this, posId) = this.addPos(pos);
    name = Name(posId, str);
    (this, name)
  }

  fun parseProgram(): (this, Program) {
    defs = mutable Vector[];
    loop {
      (!this, def) = this.parseDefinition();
      defs.push(def);
      if (this.isEOF()) return (this, Program(defs.toArray()));
    }
  }

  fun parseDefinition(): (this, Def) {
    if (this.isEq("class")) {
      (!this, _) = this.next();
      this.parseClass()
    } else if (this.isEq("fun")) {
      (!this, _) = this.next();
      this.parseFun()
    } else {
      throw ExpectedClassOrFun(this.lexer.fileName, this.pos);
    }
  }

  fun parseClass(): (this, Class) {
    !this.topSym = 0;
    (!this, className) = this.parseSymbol();
    (!this, fields) = this.parseFieldList();
    !this.currentSymbol = None();
    fieldIndex = SortedMap[];
    for (i => item in fields.items().collect(Array)) {
      (fieldName, _) = item;
      !fieldIndex[fieldName] = i;
    };
    (this, Class{name => className, fields, fieldIndex})
  }

  fun parseFieldList(): (this, SortedMap<String, (Name, Type)>) {
    !this = this.expect("{");
    fieldMap = SortedMap[];

    loop {
      (!this, tok) = this.next();
      if (tok.isEmpty()) {
        throw UnfinishedClassDef(this.lexer.fileName, this.pos);
      };
      if (this.lexer.content[tok.begin] == '}') {
        return (this, fieldMap)
      };
      if (
        this.lexer.content[tok.begin] >= 'a' &&
        this.lexer.content[tok.begin] <= 'z'
      ) {
        fieldNameStr = String::fromChars(
          this.lexer.content.slice(tok.begin, tok.end),
        );
        pos = Pos(this.lexer.fileName, tok.begin, tok.end);
        (!this, posId) = this.addPos(pos);
        fieldName = Name(posId, fieldNameStr);
        !this = this.expect(":");
        (!this, fieldType) = this.parseType();
        if (fieldMap.containsKey(fieldName.value)) {
          throw DuplicateFields(pos.fileName, pos.begin);
        };
        !fieldMap[fieldName.value] = (fieldName, fieldType);
        if (this.isEq("}")) continue;
        !this = this.expect(",");
        continue
      };
      throw InvalidFieldName(this.lexer.fileName, this.pos)
    }
  }

  fun parseParams(): (this, SortedMap<String, Name>) {
    !this = this.expect("(");

    fieldMap = SortedMap[];

    loop {
      (!this, tok) = this.next();
      if (tok.isEmpty()) {
        throw UnfinishedFunDef(this.lexer.fileName, this.pos);
      };
      if (this.lexer.content[tok.begin] == ')') {
        return (this, fieldMap)
      };
      if (
        this.lexer.content[tok.begin] >= 'a' &&
        this.lexer.content[tok.begin] <= 'z'
      ) {
        fieldNameStr = String::fromChars(
          this.lexer.content.slice(tok.begin, tok.end),
        );
        pos = Pos(this.lexer.fileName, tok.begin, tok.end);
        (!this, posId) = this.addPos(pos);
        fieldName = Name(posId, fieldNameStr);
        if (fieldMap.containsKey(fieldName.value)) {
          throw DuplicateParams(pos.fileName, pos.begin);
        };
        !fieldMap[fieldName.value] = fieldName;
        if (this.isEq(")")) continue;
        !this = this.expect(",");
        continue
      };
      throw InvalidParameterName(this.lexer.fileName, this.pos)
    }
  }

  fun parseType(): (this, Type) {
    (!this, tname) = this.parseName();
    (this, Type(tname.posId, TNamed(tname.value)))
  }

  fun parseFun(): (this, Fun) {
    !this.topSym = 0;
    (!this, funName) = this.parseSymbol();
    (!this, params) = this.parseParams();
    !this = this.expect("{");
    (!this, eqs, ret) = this.parseEqs();
    !this.currentSymbol = None();
    (this, Fun{name => funName, params, body => Seq(eqs, ret)})
  }

  fun parseEqs(): (this, Array<Eq>, Expr) {
    eqs = mutable Vector[];
    loop {
      (!this, lhs) = this.parseExpr();
      if (this.isEq("=")) {
        !this = this.expect("=");
        (!this, rhs) = this.parseExpr();
        !this = this.expect(";");
        eqs.push(Eq(lhs, rhs));
        continue
      };
      !this = this.expect("}");
      return (this, eqs.toArray(), lhs);
    }
  }

  fun genSym(): (this, Int) {
    result = this.topSym;
    !this.topSym = result + 1;
    (this, result)
  }

  fun addPos(pos: Pos): (this, PosId) {
    (!this, id) = this.genSym();
    posId = PosId(this.currentSymbol.fromSome(), id);
    !this.posMap[posId] = pos;
    (this, posId)
  }

  fun parseInstance(): (this, Array<(Name, Expr)>) {
    !this = this.expect("{");
    fields = mutable Vector[];
    loop {
      if (this.isEq("}")) {
        !this = this.expect("}");
        return (this, fields.toArray());
      };
      (!this, name) = this.parseName();
      !this = this.expect("=>");
      (!this, e) = this.parseExpr();
      fields.push((name, e));
      if (this.isEq("}")) continue;
      !this = this.expect(",");
    }
  }

  fun parseExpr(): (this, Expr) {
    (!this, e) = this.parseSimpleExpr();
    begin = this.posMap[e.posId].begin;
    e.e match {
    | _ if (this.isEq("[")) ->
      !this = this.expect("[");
      (!this, idx) = this.parseExpr();
      !this = this.expect("]");
      pos = Pos(this.lexer.fileName, begin, this.pos);
      (!this, posId) = this.addPos(pos);
      (this, Expr(posId, EGetArray(e, idx)))
    | _ if (this.isEq("<")) ->
      !this = this.expect("<");
      (!this, ty) = this.parseType();
      tyOpt = Some(ty);
      if (this.isEq(">.")) {
        !this = this.expect(">.");
      } else {
        !this = this.expect(">");
        !this = this.expect(".");
      };
      (!this, fieldName) = this.parseName();
      pos = Pos(this.lexer.fileName, begin, this.pos);
      (!this, posId) = this.addPos(pos);
      (this, Expr(posId, EDot(tyOpt, e, fieldName)))
    | _ if (this.isEq(".")) ->
      !this = this.expect(".");
      tyOpt = None();
      (!this, fieldName) = this.parseName();
      pos = Pos(this.lexer.fileName, begin, this.pos);
      (!this, posId) = this.addPos(pos);
      (this, Expr(posId, EDot(tyOpt, e, fieldName)))
    | e_ if (this.isEq("(")) ->
      !this = this.expect("(");
      (!this, args) = this.parseExprList(")");
      (!this, posId) = this.addPos(Pos(this.lexer.fileName, begin, this.pos));
      (this, Expr(posId, ECall(Expr(posId, e_), args)))
    | _ -> (this, e)
    }
  }

  fun parseSimpleExpr(): (this, Expr) {
    (!this, tok) = this.next();

    if (this.lexer.isEq(tok.begin, "if")) {
      !this = this.expect("(");
      (!this, cond) = this.parseExpr();
      !this = this.expect(")");
      !this = this.expect("{");
      (!this, eqs1, ret1) = this.parseEqs();
      !this = this.expect("else");
      !this = this.expect("{");
      (!this, eqs2, ret2) = this.parseEqs();
      pos = Pos(this.lexer.fileName, tok.begin, this.pos);
      (!this, posId) = this.addPos(pos);
      return (this, Expr(posId, EIf(cond, Seq(eqs1, ret1), Seq(eqs2, ret2))));
    };

    if (this.lexer.content[tok.begin] == '(') {
      return this.parseExprTuple();
    };

    if (Chars.isDigit(this.lexer.content[tok.begin])) {
      str = String::fromChars(this.lexer.content.slice(tok.begin, tok.end));
      pos = tok.toPos(this.lexer.fileName);
      (!this, posId) = this.addPos(pos);
      return (this, Expr(posId, EInt(str.toInt())))
    };

    if (isLetter(this.lexer.content[tok.begin])) {
      c = this.lexer.content[tok.begin];
      str = String::fromChars(this.lexer.content.slice(tok.begin, tok.end));
      pos = tok.toPos(this.lexer.fileName);
      (!this, posId) = this.addPos(pos);
      name = Name(posId, str);
      if (c >= 'A' && c <= 'Z') {
        if (name.value == "Array") {
          !this = this.expect("[");
          (!this, arr) = this.parseExprList("]");
          posExpr = Pos(this.lexer.fileName, tok.begin, this.pos);
          (!this, posIdExpr) = this.addPos(posExpr);
          return (this, Expr(posIdExpr, EArray(arr)))
        } else {
          (!this, fields) = this.parseInstance();
          posExpr = Pos(this.lexer.fileName, tok.begin, this.pos);
          (!this, posIdExpr) = this.addPos(posExpr);
          return (this, Expr(posIdExpr, EObject(name, fields)))
        }
      } else {
        return (this, Expr(posId, EVar(name)))
      }
    };

    throw InvalidExpression(this.lexer.fileName, tok.begin);
  }

  fun parseExprTuple(): (this, Expr) {
    begin = this.pos - 1;
    (!this, arr) = this.parseExprList(")");
    pos = Pos(this.lexer.fileName, begin, this.pos);
    (!this, posId) = this.addPos(pos);
    (this, Expr(posId, ETuple(arr)))
  }

  fun parseExprList(last: String): (this, Array<Expr>) {
    exprl = mutable Vector[];

    loop {
      if (this.isEq(last)) {
        (!this, _) = this.next();
        return (this, exprl.toArray());
      };
      (!this, e) = this.parseExpr();
      exprl.push(e);
      if (this.isEq(last)) continue;
      !this = this.expect(",");
    }
  }
}
